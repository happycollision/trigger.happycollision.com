---
import { marked } from "marked"
import { getCollection } from "astro:content"
import { urlsMatch, slasher as s } from "$lib/urls"
import Layout from "$layouts/Layout.astro"
import Markdown from "$layouts/Markdown.astro"

import { shows } from "./shows"

export async function getStaticPaths() {
  function ensureArray<T>(x: T | T[]): T[] {
    return Array.isArray(x) ? x : [x]
  }
  const baseUrl = "/catalogue/shows"
  const songList = await getCollection("songs")

  return shows.flatMap((show) => {
    let songNo = 0
    const sets = show.sets.map((songs) =>
      songs
        .map((song) => ({
          ...song,
          banterHtml: song.banter ? marked.parse(song.banter) : undefined,
        }))
        .map((song) => {
          const [slug, ...altSlugs] = ensureArray(song.slug)
          const found = songList.find((x) => x.slug === slug)
          if (!found) throw new Error(`Couldn't find song ${slug}`)

          const altsFound = altSlugs.map((alt) => {
            const altFound = songList.find((x) => x.slug === alt)
            if (!altFound)
              throw new Error(`Couldn't find alternative song ${alt}`)
            return altFound
          })

          return {
            ...song,
            ...found,
            songNo: ++songNo,
            altVersions: altsFound.map((alt) => ({
              ...song,
              ...alt,
              songNo,
            })),
          }
        }),
    )

    const baseProps = {
      showName: show.name,
      sets,
      showsUrl: s`${baseUrl}`,
      showUrl: s`${baseUrl}/${show.slug}`,
    }

    const allSongs = sets.flat()

    const baseRoute = {
      params: { path: show.slug },

      props: {
        ...baseProps,
        songDetails: undefined as
          | Omit<(typeof allSongs)[number], "altVersions">
          | undefined,
        safeSlug: undefined as string | undefined,
        thisUrl: baseProps.showUrl,
        nextUrl: undefined as string | undefined,
        prevUrl: undefined as string | undefined,
        altVersions: undefined as
          | { path: string; title: string | undefined }[]
          | undefined,
      },
    }

    return [
      baseRoute,
      ...allSongs.flatMap((x, i, arr): (typeof baseRoute)[] => {
        const { altVersions, ...details } = x

        const altProps = altVersions.length
          ? [
              {
                path: s`${baseProps.showUrl}/${x.songNo}`,
                title: x.data.altTitle,
              },
              ...altVersions.map((alt) => ({
                path: s`${baseProps.showUrl}/${x.songNo}/alt/${
                  alt.slug.split("_")[1]
                }`,
                title: alt.data.altTitle,
              })),
            ]
          : undefined

        const altsInfo = altVersions.map((alt) => ({
          params: {
            path: `${show.slug}/${x.songNo}/alt/${alt.slug.split("_")[1]}`,
          },

          props: {
            ...baseProps,
            songDetails: alt,
            safeSlug: x.slug,
            thisUrl: s`${baseProps.showUrl}/${x.songNo}/alt/${
              alt.slug.split("_")[1]
            }`,
            nextUrl:
              i < arr.length - 1
                ? s`${baseProps.showUrl}/${x.songNo + 1}`
                : undefined,
            prevUrl:
              i > 0 ? s`${baseProps.showUrl}/${x.songNo - 1}` : undefined,
            altVersions: altProps,
          },
        }))

        return [
          {
            params: { path: `${show.slug}/${x.songNo}` },

            props: {
              ...baseProps,
              songDetails: details,
              safeSlug: x.slug,
              thisUrl: s`${baseProps.showUrl}/${x.songNo}`,
              nextUrl:
                i < arr.length - 1
                  ? s`${baseProps.showUrl}/${x.songNo + 1}`
                  : undefined,
              prevUrl:
                i > 0 ? s`${baseProps.showUrl}/${x.songNo - 1}` : undefined,
              altVersions: altProps,
            },
          },
          ...altsInfo,
        ]
      }),
    ]
  })
}

type GspProps = Awaited<ReturnType<typeof getStaticPaths>>[number]["props"]

interface Props extends GspProps {}

const {
  sets,
  songDetails,
  safeSlug,
  nextUrl,
  prevUrl,
  showUrl,
  showsUrl,
  showName,
  altVersions,
} = Astro.props

const { Content } = (await songDetails?.render()) ?? { Content: undefined }

const thisSongStats = sets
  .flatMap((songs, iSet) =>
    songs.map(
      (song, iSong, allSongs) =>
        [iSet + 1, iSong + 1, allSongs.length, song] as const,
    ),
  )
  .filter(([_setNum, _songNum, _total, song]) => song.slug === safeSlug)
  .map(([set, songNum, totalSongs]) => ({ set, songNum, totalSongs }))
---

<script>
  function scrollBy(
    element: Element | null,
    value: number,
    duration: number,
    easingFunc: (t: number) => number,
  ) {
    if (!element) return
    var startTime: number
    var startPos = element.scrollTop
    var clientHeight = element.clientHeight
    var maxScroll = element.scrollHeight - clientHeight
    var scrollIntendedDestination = startPos + value
    // low and high bounds for possible scroll destinations
    var scrollEndValue = Math.min(
      Math.max(scrollIntendedDestination, 0),
      maxScroll,
    )
    // create recursive function to call every frame
    var scroll = function (timestamp: number) {
      startTime = startTime || timestamp
      var elapsed = timestamp - startTime
      element.scrollTop =
        startPos + (scrollEndValue - startPos) * easingFunc(elapsed / duration)
      elapsed <= duration && window.requestAnimationFrame(scroll)
    }
    // call recursive function
    if (startPos != scrollEndValue) window.requestAnimationFrame(scroll)
  }

  var easeInOutCubic = function (t: number) {
    return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1
  }

  function scrolly() {
    scrollBy(
      window.document.scrollingElement,
      window.innerHeight * 0.66,
      1500,
      easeInOutCubic,
    )
  }

  document.querySelector("[data-scroll]")?.addEventListener("click", scrolly)

  // Columns

  function syncCols() {
    let cols = localStorage.getItem("render:cols") ?? "1"
    document.body.style.setProperty("--cols", cols)
  }
  function toggleCols() {
    let cols = localStorage.getItem("render:cols") ?? "1"
    cols = cols === "1" ? "2" : "1"
    localStorage.setItem("render:cols", cols)
    syncCols()
  }
  syncCols()

  document
    .querySelector("button[data-toggle-cols]")
    ?.addEventListener("click", toggleCols)

  // Text size

  function syncTextSize() {
    let textSize = localStorage.getItem("render:textSize") ?? "1"
    document.body.style.setProperty("--text-size", textSize + "rem")
  }
  function toggleTextSize() {
    let textSize = localStorage.getItem("render:textSize") ?? "1"
    textSize = textSize === "1" ? "0.75" : "1"
    localStorage.setItem("render:textSize", textSize)
    syncTextSize()
  }
  syncTextSize()

  document
    .querySelector("button[data-toggle-text-size]")
    ?.addEventListener("click", toggleTextSize)
</script>

<Layout
  title={songDetails ? `${songDetails.data.title} | ${showName}` : showName}
  noHeader
>
  <div class="p-2 pt-0">
    <div class="flex flex-col lg:flex-row gap-4">
      {
        songDetails && Content && (
          <div class="lg:order-1 lg:grow">
            {[0, 1].map((i) => (
              <div
                class={`py-2 ${
                  i === 0
                    ? "invisible"
                    : "bg-white fixed z-10 top-0 w-[calc(100%-1rem)] lg:w-[calc(100%-26rem)]"
                }`}
              >
                {thisSongStats.map((x) => (
                  <div class="text-2xl sm:hidden">
                    Set {x.set}, Song {x.songNum} of {x.totalSongs}
                  </div>
                ))}
                <div class="flex gap-4 items-baseline">
                  <a
                    href={`${showUrl}#${safeSlug}`}
                    class="text-xl bg-blue-600 text-white rounded py-1 px-2 hover:bg-blue-500"
                  >
                    Close Song
                  </a>
                  <div class="flex grow justify-between">
                    {prevUrl ? (
                      <a
                        href={prevUrl}
                        class="text-xl bg-blue-600 text-white rounded py-1 px-2 hover:bg-blue-500"
                      >
                        ← Previous
                      </a>
                    ) : (
                      <span class="text-xl bg-blue-600 text-white rounded py-1 px-2 hover:bg-blue-500 opacity-20">
                        ← Previous
                      </span>
                    )}
                    {thisSongStats.map((x) => (
                      <div class="hidden sm:block text-xl">
                        Set {x.set}: Song {x.songNum} of {x.totalSongs}
                      </div>
                    ))}
                    {nextUrl ? (
                      <a
                        href={nextUrl}
                        class="text-xl bg-blue-600 text-white rounded py-1 px-2 hover:bg-blue-500"
                      >
                        Next →
                      </a>
                    ) : (
                      <span class="text-xl bg-blue-600 text-white rounded py-1 px-2 hover:bg-blue-500 opacity-20">
                        Next →
                      </span>
                    )}
                  </div>
                </div>
              </div>
            ))}

            <div class="w-full lg:w-auto">
              <div class="flex flex-wrap items-center justify-between">
                <div class="shrink-0">
                  <h2 class="text-3xl">{songDetails.data.title}</h2>
                  <h3 class="text-xl">lead vocals: {songDetails.feat}</h3>
                  <button
                    data-toggle-cols
                    class="text-xl bg-blue-600 text-white rounded py-1 px-2 hover:bg-blue-500"
                  >
                    Toggle cols
                  </button>
                  <button
                    data-toggle-text-size
                    class="text-xl bg-blue-600 text-white rounded py-1 px-2 hover:bg-blue-500"
                  >
                    Text size
                  </button>
                </div>

                {altVersions && (
                  <div class="grow text-center">
                    <ul class="border border-blue-400 inline-flex rounded">
                      {altVersions.map((alt, i, arr) => {
                        const isLast = arr.length === i + 1
                        const isActive = urlsMatch(Astro.url.pathname, alt.path)
                        return (
                          <li class="flex">
                            <a
                              href={alt.path}
                              class={`px-2 py-1 ${
                                isLast ? "" : "border-r"
                              } border-blue-400 ${
                                isActive ? "bg-blue-400" : ""
                              }`}
                            >
                              {alt.title}
                            </a>
                          </li>
                        )
                      })}
                    </ul>
                  </div>
                )}
              </div>

              <div class="mt-4 text-xl">{songDetails.data.reminder}</div>

              <div class="text-xl mt-4 [&_pre]:whitespace-pre-wrap">
                <Markdown>
                  {songDetails.banterHtml && (
                    <div
                      class="bg-gray-200 rounded p-2 border border-gray-500 my-4"
                      set:html={songDetails.banterHtml}
                    />
                  )}
                  <Content />
                </Markdown>
                <button
                  data-scroll
                  class="block sticky bottom-0 left-0 w-full h-[33.33vh]"
                />
              </div>
            </div>
          </div>
        )
      }

      <div class="lg:w-96 shrink-0">
        <div class="text-2xl border-b border-neutral-400 flex items-baseline">
          <h1 class="inline mr-4">
            <a href={showUrl} class="link !no-underline">
              {showName}
            </a>
          </h1>
          <span class="text-base">
            (<a href={showsUrl} class="link !no-underline">all shows ↩︎</a>)
          </span>
        </div>
        {
          sets.map((songs, i) => (
            <div class="mt-4 break-after-page">
              <h2 class="text-2xl mb-4">Set {++i}</h2>
              <ol class="list-decimal text-xl">
                {songs.map((song) => {
                  const isActive =
                    urlsMatch(
                      Astro.url.pathname,
                      `${showUrl}/${song.songNo}`,
                    ) ||
                    Astro.url.pathname.startsWith(
                      `${showUrl}/${song.songNo}/alt/`,
                    )

                  return (
                    <a
                      id={song.slug}
                      class={
                        "block break-inside-avoid " +
                        (isActive ? "bg-neutral-200" : "hover:bg-blue-200")
                      }
                      href={s`${showUrl}/${song.songNo}`}
                    >
                      <li class="py-4 ml-12 pl-0">
                        <div>
                          <strong class="min-w-[4rem] inline-block">
                            {song.feat}
                          </strong>
                          <span class="link !no-underline">
                            {song.data.title}
                          </span>
                        </div>
                        {song.data.reminder && (
                          <div class="mt-2">{song.data.reminder}</div>
                        )}
                      </li>
                    </a>
                  )
                })}
              </ol>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</Layout>
